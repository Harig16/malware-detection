import pickle
import cv2
import os
from imutils import paths
import numpy as np
import argparse
import random
from keras.preprocessing.image import img_to_array

argprs = argparse.ArgumentParser()
argprs.add_argument("-X", "--xlabel", required=True,
	help="x label store in pickle")
argprs.add_argument("-Y", "--ylabel", required=True,
	help="y label store in pickle")
argprs.add_argument("-I", "--img_dims", required = True,
	help="image dimension such as 32, 64 etc...")
argprs.add_argument("-D", "--dataset", required=True,
	help="path to input dataset")
args = vars(argprs.parse_args())

imagePaths = sorted(list(paths.list_images(args["dataset"])))
random.seed(7)
random.shuffle(imagePaths)

IMAGE_DIMS = int(args["img_dims"])

data = []
labels = []

for imagePath in imagePaths:

	image = cv2.imread(imagePath, cv2.IMREAD_GRAYSCALE)
	image = cv2.resize(image, (IMAGE_DIMS, IMAGE_DIMS))
	image = img_to_array(image)
	data.append(image)

	label = imagePath.split(os.path.sep)[-2]
	labels.append(label)

print "X label format"
pickle_out = open(args["xlabel"], "wb")
pickle.dump(data,pickle_out)
pickle_out.close()
print "X dataformat is completed"

print "Y label format"
pickle_out = open(args["ylabel"], "wb")
pickle.dump(labels, pickle_out)
pickle_out.close()
print "Y dataformat is completed"

data = np.array(data, dtype="float") / 255.0
labels = np.array(labels)
print("[INFO] data matrix: {:.2f}MB".format(
	data.nbytes / (1024 * 1000.0)))
